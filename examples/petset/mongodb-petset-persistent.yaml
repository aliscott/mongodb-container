kind: Template
apiVersion: v1
metadata:
  name: mongodb-petset-replication
  annotations:
    description: "MongoDB Replication Example (based on StatefulSet). You must have persistent volumes available in your cluster to use this template."
    iconClass: "icon-mongodb"
    tags: "database,mongodb,replication"
parameters:
  - name: MONGODB_USER
    displayName: "MongoDB Connection Username"
    description: "Username for MongoDB user that will be used for accessing the database."
    generate: expression
    from: "[a-zA-Z0-9]{3}"
    required: true

  - name: MONGODB_PASSWORD
    displayName: "MongoDB Connection Password"
    description: "Password for the MongoDB connection user."
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true

  - name: MONGODB_DATABASE
    displayName: "MongoDB Database Name"
    description: "Name of the MongoDB database accessed."
    value: sampledb
    required: true

  - name: MONGODB_ADMIN_PASSWORD
    displayName: "MongoDB Admin Password"
    description: "Password for the database admin user."
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true

  - name: MONGODB_REPLICA_NAME
    displayName: "Replica Set Name"
    description: "The name of the replica set."
    value: rs0
    required: true

  - name: MONGODB_KEYFILE_VALUE
    displayName: "Keyfile Content"
    description: "The value of the MongoDB keyfile (https://docs.mongodb.com/manual/core/security-internal-authentication/#internal-auth-keyfile)."
    generate: expression
    from: "[a-zA-Z0-9]{255}"
    required: true

  - name: MONGODB_IMAGE
    displayName: "MongoDB Docker Image"
    description: "A reference to a supported MongoDB Docker image."
    value: "openshift/mongodb-32-centos7"
    required: true

  - name: MONGODB_SERVICE_NAME
    displayName: "OpenShift Service Name"
    description: "The name of the OpenShift Service exposed for the database."
    value: mongodb
    required: true

  - name: VOLUME_CAPACITY
    displayName: "Volume Capacity"
    description: "Volume space available for data, e.g. 512Mi, 2Gi."
    value: "1Gi"
    required: true

  - name: MEMORY_LIMIT
    displayName: "Memory Limit"
    description: "Maximum amount of memory the container can use."
    value: "512Mi"

  - name: MONGODB_SSL_MODE
    displayName: "MongoDB SSL Mode"
    description: |-
      "The MongoDB SSL mode. This can be requireSSL, allowSSL or preferSSL.
      Leave this blank if you do not want to enable SSL on the server. This is
      only supported for MongoDB 3.2"

  - name: MONGODB_SSL_PEM_KEY_FILE
    displayName: "MongoDB SSL PEM Key File"
    description: |-
      "The MongoDB SSL certificate and key file contents with new lines
      included. You can ensure this is inputted correctly by clicking on the
      arrows to expand the below text area and ensuring you enter a new line at
      the end of the content. Leave this blank if you do not want to enable SSL
      on the server."

  - name: MONGODB_SSL_CA_FILE
    displayName: "MongoDB SSL CA File"
    description: |-
      "The MongoDB SSL CA certificate file contents with new lines included.
      This is not required for SSL, without it you will need to ensure that any
      clients connecting over SSL use the --sslAllowInvalidCertificates option.
      You can ensure this is inputted correctly by clicking on the arrows to
      expand the below text area and ensuring you enter a new line at
      the end of the content."

  - name: MONGODB_SSL_PEM_KEY_PASSWORD
    displayName: "MongoDB SSL PEM Key Password"
    description: |-
      "Add your MongoDB SSL key password if your SSL key is protected
      with a password. This is not required for SSL keys that are not
      protected."

  - name: MONGODB_SSL_ADDITIONAL_OPTIONS
    displayName: "MongoDB SSL Options"
    description: "Any additional SSL option flags for MongoDB, e.g.
      --sslAllowConnectionsWithoutCertificates and --sslDisabledProtocols"

objects:
  # A secret for storing the MongoDB authentication parameters
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${MONGODB_SERVICE_NAME}
      annotations:
        template.openshift.io/expose-username: "{.data['database-user']}"
        template.openshift.io/expose-password: "{.data['database-password']}"
        template.openshift.io/expose-admin_password: "{.data['database-admin-password']}"
    stringData:
      database-user: ${MONGODB_USER}D}
      database-password: ${MONGODB_PASSWORD}
      database-admin-password: ${MONGODB_ADMIN_PASSWOR
      mongodb-keyfile-value: ${MONGODB_KEYFILE_VALUE}
      mongodb-ssl-pem-key-password: ${MONGODB_SSL_PEM_KEY_PASSWORD}

  # A secret for storing the MongoDB SSL certificates
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${MONGODB_SERVICE_NAME}-ssl
    stringData:
      mongodb.pem: ${MONGODB_SSL_PEM_KEY_FILE}
      cacert.pem: ${MONGODB_SSL_CA_FILE}

  # A non-headless service which takes pod readiness into consideration
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}"
    spec:
      # the list of ports that are exposed by this service
      ports:
        - name: mongodb
          port: 27017
      # will route traffic to pods having labels matching this selector
      selector:
        name: "${MONGODB_SERVICE_NAME}"

  # A headless service to create DNS records
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}-internal"
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    spec:
      clusterIP: None
      # the list of ports that are exposed by this service
      ports:
        - name: mongodb
          port: 27017
      # will route traffic to pods having labels matching this selector
      selector:
        name: "${MONGODB_SERVICE_NAME}"

  - kind: StatefulSet
    apiVersion: apps/v1beta1
    metadata:
      name: "${MONGODB_SERVICE_NAME}"
    spec:
      # pets get DNS/hostnames that follow the pattern: ${metadata.name}-NUM.${spec.serviceName}.default.svc.cluster.local
      serviceName: "${MONGODB_SERVICE_NAME}-internal"
      replicas: 3
      # describes the pod that will be created if insufficient replicas are detected
      template:
        metadata:
          # this label will be used for count running pods
          labels:
            name: "${MONGODB_SERVICE_NAME}"
        spec:
          containers:
            - name: mongo-container
              image: "${MONGODB_IMAGE}"
              imagePullPolicy: Always
              ports:
                - containerPort: 27017
              args:
                - "run-mongod-pet"
              volumeMounts:
                - name: mongo-ssl
                  mountPath: "/var/lib/mongodb/ssl"
                - name: mongo-data
                  mountPath: "/var/lib/mongodb/data"
              env:
                - name: MONGODB_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${MONGODB_SERVICE_NAME}
                - name: MONGODB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${MONGODB_SERVICE_NAME}
                - name: MONGODB_DATABASE
                  value: "${MONGODB_DATABASE}"
                - name: MONGODB_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-admin-password
                      name: ${MONGODB_SERVICE_NAME}
                - name: MONGODB_REPLICA_NAME
                  value: "${MONGODB_REPLICA_NAME}"
                - name: MONGODB_KEYFILE_VALUE
                  valueFrom:
                    secretKeyRef:
                      key: mongodb-keyfile-value
                      name: ${MONGODB_SERVICE_NAME}
                - name: MONGODB_SERVICE_NAME
                  value: "${MONGODB_SERVICE_NAME}-internal"
                - name: MONGODB_SSL_MODE
                  value: ${MONGODB_SSL_MODE}
                - name: MONGODB_SSL_PEM_KEY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: mongodb-ssl-pem-key-password
                      name: ${MONGODB_SERVICE_NAME}
                - name: MONGODB_SSL_ADDITIONAL_OPTIONS
                  value: ${MONGODB_SSL_ADDITIONAL_OPTIONS}
              resources:
                limits:
                  memory: "${MEMORY_LIMIT}"
              readinessProbe:
                exec:
                  command:
                    - stat
                    - /tmp/initialized
          volumes:
            - name: mongo-ssl
              secret:
                secretName: ${MONGODB_SERVICE_NAME}-ssl
      volumeClaimTemplates:
        - metadata:
            name: mongo-data
            annotations:
              # Uncomment this if using dynamic volume provisioning.
              # https://docs.openshift.org/latest/install_config/persistent_storage/dynamically_provisioning_pvs.html
              # volume.alpha.kubernetes.io/storage-class: anything
          spec:
            # the volume can be mounted as read-write by a single node
            accessModes: [ ReadWriteOnce ]
            resources:
              requests:
                storage: "${VOLUME_CAPACITY}"
